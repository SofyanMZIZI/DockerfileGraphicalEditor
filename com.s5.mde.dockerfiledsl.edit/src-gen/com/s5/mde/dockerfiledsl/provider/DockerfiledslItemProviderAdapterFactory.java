/**
 */
package com.s5.mde.dockerfiledsl.provider;

import com.s5.mde.dockerfiledsl.util.DockerfiledslAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DockerfiledslItemProviderAdapterFactory extends DockerfiledslAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DockerfiledslItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.HEALTHCHECK} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HEALTHCHECKItemProvider healthcheckItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.HEALTHCHECK}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHEALTHCHECKAdapter() {
		if (healthcheckItemProvider == null) {
			healthcheckItemProvider = new HEALTHCHECKItemProvider(this);
		}

		return healthcheckItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.ADD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ADDItemProvider addItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.ADD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createADDAdapter() {
		if (addItemProvider == null) {
			addItemProvider = new ADDItemProvider(this);
		}

		return addItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.SHELL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SHELLItemProvider shellItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.SHELL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSHELLAdapter() {
		if (shellItemProvider == null) {
			shellItemProvider = new SHELLItemProvider(this);
		}

		return shellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.SchellForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchellFormItemProvider schellFormItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.SchellForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchellFormAdapter() {
		if (schellFormItemProvider == null) {
			schellFormItemProvider = new SchellFormItemProvider(this);
		}

		return schellFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.StartPeriod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartPeriodItemProvider startPeriodItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.StartPeriod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartPeriodAdapter() {
		if (startPeriodItemProvider == null) {
			startPeriodItemProvider = new StartPeriodItemProvider(this);
		}

		return startPeriodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.FROM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FROMItemProvider fromItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.FROM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFROMAdapter() {
		if (fromItemProvider == null) {
			fromItemProvider = new FROMItemProvider(this);
		}

		return fromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.CMD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMDItemProvider cmdItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.CMD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCMDAdapter() {
		if (cmdItemProvider == null) {
			cmdItemProvider = new CMDItemProvider(this);
		}

		return cmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.COPY} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected COPYItemProvider copyItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.COPY}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCOPYAdapter() {
		if (copyItemProvider == null) {
			copyItemProvider = new COPYItemProvider(this);
		}

		return copyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.WORKDIR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WORKDIRItemProvider workdirItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.WORKDIR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWORKDIRAdapter() {
		if (workdirItemProvider == null) {
			workdirItemProvider = new WORKDIRItemProvider(this);
		}

		return workdirItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.STOPSIGNAL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected STOPSIGNALItemProvider stopsignalItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.STOPSIGNAL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSTOPSIGNALAdapter() {
		if (stopsignalItemProvider == null) {
			stopsignalItemProvider = new STOPSIGNALItemProvider(this);
		}

		return stopsignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Data} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataItemProvider dataItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Data}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAdapter() {
		if (dataItemProvider == null) {
			dataItemProvider = new DataItemProvider(this);
		}

		return dataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.KeyValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValueItemProvider keyValueItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.KeyValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValueAdapter() {
		if (keyValueItemProvider == null) {
			keyValueItemProvider = new KeyValueItemProvider(this);
		}

		return keyValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.USER} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected USERItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.USER}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUSERAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new USERItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Src} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SrcItemProvider srcItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Src}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSrcAdapter() {
		if (srcItemProvider == null) {
			srcItemProvider = new SrcItemProvider(this);
		}

		return srcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Path} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PathItemProvider pathItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Path}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPathAdapter() {
		if (pathItemProvider == null) {
			pathItemProvider = new PathItemProvider(this);
		}

		return pathItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.ENV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ENVItemProvider envItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.ENV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createENVAdapter() {
		if (envItemProvider == null) {
			envItemProvider = new ENVItemProvider(this);
		}

		return envItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Signal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalItemProvider signalItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Signal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalAdapter() {
		if (signalItemProvider == null) {
			signalItemProvider = new SignalItemProvider(this);
		}

		return signalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.ONBUILD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ONBUILDItemProvider onbuildItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.ONBUILD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createONBUILDAdapter() {
		if (onbuildItemProvider == null) {
			onbuildItemProvider = new ONBUILDItemProvider(this);
		}

		return onbuildItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Retries} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RetriesItemProvider retriesItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Retries}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRetriesAdapter() {
		if (retriesItemProvider == null) {
			retriesItemProvider = new RetriesItemProvider(this);
		}

		return retriesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Checksum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChecksumItemProvider checksumItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Checksum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChecksumAdapter() {
		if (checksumItemProvider == null) {
			checksumItemProvider = new ChecksumItemProvider(this);
		}

		return checksumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.VOLUME} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VOLUMEItemProvider volumeItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.VOLUME}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVOLUMEAdapter() {
		if (volumeItemProvider == null) {
			volumeItemProvider = new VOLUMEItemProvider(this);
		}

		return volumeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Protocol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtocolItemProvider protocolItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Protocol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtocolAdapter() {
		if (protocolItemProvider == null) {
			protocolItemProvider = new ProtocolItemProvider(this);
		}

		return protocolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.ExecForm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecFormItemProvider execFormItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.ExecForm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecFormAdapter() {
		if (execFormItemProvider == null) {
			execFormItemProvider = new ExecFormItemProvider(this);
		}

		return execFormItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.LABEL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LABELItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.LABEL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLABELAdapter() {
		if (labelItemProvider == null) {
			labelItemProvider = new LABELItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Name} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameItemProvider nameItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Name}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameAdapter() {
		if (nameItemProvider == null) {
			nameItemProvider = new NameItemProvider(this);
		}

		return nameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.EXPOSE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EXPOSEItemProvider exposeItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.EXPOSE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEXPOSEAdapter() {
		if (exposeItemProvider == null) {
			exposeItemProvider = new EXPOSEItemProvider(this);
		}

		return exposeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.RUN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RUNItemProvider runItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.RUN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRUNAdapter() {
		if (runItemProvider == null) {
			runItemProvider = new RUNItemProvider(this);
		}

		return runItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.ENTRYPOINT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ENTRYPOINTItemProvider entrypointItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.ENTRYPOINT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createENTRYPOINTAdapter() {
		if (entrypointItemProvider == null) {
			entrypointItemProvider = new ENTRYPOINTItemProvider(this);
		}

		return entrypointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Key} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyItemProvider keyItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Key}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyAdapter() {
		if (keyItemProvider == null) {
			keyItemProvider = new KeyItemProvider(this);
		}

		return keyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Image} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageItemProvider imageItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Image}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageAdapter() {
		if (imageItemProvider == null) {
			imageItemProvider = new ImageItemProvider(this);
		}

		return imageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.ARG} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ARGItemProvider argItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.ARG}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createARGAdapter() {
		if (argItemProvider == null) {
			argItemProvider = new ARGItemProvider(this);
		}

		return argItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Platform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformItemProvider platformItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Platform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformAdapter() {
		if (platformItemProvider == null) {
			platformItemProvider = new PlatformItemProvider(this);
		}

		return platformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Dest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DestItemProvider destItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Dest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDestAdapter() {
		if (destItemProvider == null) {
			destItemProvider = new DestItemProvider(this);
		}

		return destItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Interval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntervalItemProvider intervalItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Interval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntervalAdapter() {
		if (intervalItemProvider == null) {
			intervalItemProvider = new IntervalItemProvider(this);
		}

		return intervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Timeout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeoutItemProvider timeoutItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Timeout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeoutAdapter() {
		if (timeoutItemProvider == null) {
			timeoutItemProvider = new TimeoutItemProvider(this);
		}

		return timeoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Dockerfile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DockerfileItemProvider dockerfileItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Dockerfile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDockerfileAdapter() {
		if (dockerfileItemProvider == null) {
			dockerfileItemProvider = new DockerfileItemProvider(this);
		}

		return dockerfileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Option} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionItemProvider optionItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Option}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionAdapter() {
		if (optionItemProvider == null) {
			optionItemProvider = new OptionItemProvider(this);
		}

		return optionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Tag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagItemProvider tagItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Tag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagAdapter() {
		if (tagItemProvider == null) {
			tagItemProvider = new TagItemProvider(this);
		}

		return tagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Usr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UsrItemProvider usrItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Usr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUsrAdapter() {
		if (usrItemProvider == null) {
			usrItemProvider = new UsrItemProvider(this);
		}

		return usrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.s5.mde.dockerfiledsl.Main} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainItemProvider mainItemProvider;

	/**
	 * This creates an adapter for a {@link com.s5.mde.dockerfiledsl.Main}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainAdapter() {
		if (mainItemProvider == null) {
			mainItemProvider = new MainItemProvider(this);
		}

		return mainItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (healthcheckItemProvider != null)
			healthcheckItemProvider.dispose();
		if (addItemProvider != null)
			addItemProvider.dispose();
		if (shellItemProvider != null)
			shellItemProvider.dispose();
		if (schellFormItemProvider != null)
			schellFormItemProvider.dispose();
		if (startPeriodItemProvider != null)
			startPeriodItemProvider.dispose();
		if (fromItemProvider != null)
			fromItemProvider.dispose();
		if (cmdItemProvider != null)
			cmdItemProvider.dispose();
		if (copyItemProvider != null)
			copyItemProvider.dispose();
		if (portItemProvider != null)
			portItemProvider.dispose();
		if (workdirItemProvider != null)
			workdirItemProvider.dispose();
		if (stopsignalItemProvider != null)
			stopsignalItemProvider.dispose();
		if (dataItemProvider != null)
			dataItemProvider.dispose();
		if (keyValueItemProvider != null)
			keyValueItemProvider.dispose();
		if (userItemProvider != null)
			userItemProvider.dispose();
		if (srcItemProvider != null)
			srcItemProvider.dispose();
		if (pathItemProvider != null)
			pathItemProvider.dispose();
		if (envItemProvider != null)
			envItemProvider.dispose();
		if (signalItemProvider != null)
			signalItemProvider.dispose();
		if (onbuildItemProvider != null)
			onbuildItemProvider.dispose();
		if (retriesItemProvider != null)
			retriesItemProvider.dispose();
		if (valueItemProvider != null)
			valueItemProvider.dispose();
		if (checksumItemProvider != null)
			checksumItemProvider.dispose();
		if (volumeItemProvider != null)
			volumeItemProvider.dispose();
		if (protocolItemProvider != null)
			protocolItemProvider.dispose();
		if (execFormItemProvider != null)
			execFormItemProvider.dispose();
		if (labelItemProvider != null)
			labelItemProvider.dispose();
		if (nameItemProvider != null)
			nameItemProvider.dispose();
		if (groupItemProvider != null)
			groupItemProvider.dispose();
		if (exposeItemProvider != null)
			exposeItemProvider.dispose();
		if (runItemProvider != null)
			runItemProvider.dispose();
		if (entrypointItemProvider != null)
			entrypointItemProvider.dispose();
		if (keyItemProvider != null)
			keyItemProvider.dispose();
		if (imageItemProvider != null)
			imageItemProvider.dispose();
		if (argItemProvider != null)
			argItemProvider.dispose();
		if (platformItemProvider != null)
			platformItemProvider.dispose();
		if (destItemProvider != null)
			destItemProvider.dispose();
		if (intervalItemProvider != null)
			intervalItemProvider.dispose();
		if (timeoutItemProvider != null)
			timeoutItemProvider.dispose();
		if (dockerfileItemProvider != null)
			dockerfileItemProvider.dispose();
		if (optionItemProvider != null)
			optionItemProvider.dispose();
		if (tagItemProvider != null)
			tagItemProvider.dispose();
		if (usrItemProvider != null)
			usrItemProvider.dispose();
		if (mainItemProvider != null)
			mainItemProvider.dispose();
	}

}
